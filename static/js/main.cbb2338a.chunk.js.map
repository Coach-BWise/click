{"version":3,"sources":["components/Cards/Cards.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Cardx","props","Card","onClick","isValid","id","className","name","Img","variant","src","image","Body","Text","Nav","Navbar","Brand","href","Collapse","currentScore","topScore","chosen","reset","shuffle","arr","i","length","j","Math","floor","random","temp","App","state","cardData","forEach","element","$","text","css","color","setTimeout","push","setState","Container","Row","map","data","Col","xs","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cbb2338a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport \"./Cards.css\";\r\n\r\nfunction Cardx(props) {\r\n  return (\r\n    <Card onClick={() => props.isValid(props.id)} className={props.name}>\r\n      <Card.Img className=\"anime\" variant=\"top\" src={props.image} />\r\n      <Card.Body>\r\n        <Card.Text className=\"names text-center\">{props.name}</Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Cardx;\r\n","import React from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <Navbar className=\"col-12 mb-4\">\r\n      <Navbar.Brand className=\"justify-content-left\" href=\"/\">\r\n        Memory Game\r\n      </Navbar.Brand>\r\n\r\n      <Navbar.Collapse className=\"justify-content-around\">\r\n        <Navbar.Text id=\"instruct\">\r\n          Click each image only once to win. Once you select one they will\r\n          shuffle.\r\n        </Navbar.Text>\r\n        <Navbar.Text>Current Score: {props.currentScore}</Navbar.Text>\r\n        <Navbar.Text>Top Score {props.topScore}</Navbar.Text>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards\";\nimport cardData from \"./cards.json\";\nimport Nav from \"./components/Navbar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport $ from \"jquery\";\nimport \"./App.css\";\n\nlet chosen = [];\nlet currentScore = 0;\nlet topScore = 0;\n\nfunction reset() {\n  if (topScore < currentScore) {\n    topScore = currentScore;\n  }\n  currentScore = 0;\n\n  chosen = [];\n}\n\nfunction shuffle(arr) {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  return arr;\n}\n\nclass App extends Component {\n  state = { cardData };\n\n  isValid = (id) => {\n    chosen.forEach((element) => {\n      if (id === element) {\n        $(\"#instruct\").text(\"INCORRECT\"); // click on first element\n\n        $(\"#instruct\").css({ color: \"red\" }); //change second element background\n        setTimeout(function () {\n          $(\"#instruct\").css({ color: \"rgba(0,0,0,0.5)\" }); // change it back after ...\n          $(\"#instruct\").text(\"Play Again\");\n        }, 1000);\n        reset();\n        id = null;\n      }\n    });\n    if (id || id === 0) {\n      chosen.push(id);\n\n      $(\"#instruct\").text(\"CORRECT\"); // click on first element\n\n      $(\"#instruct\").css({ color: \"green\" }); //change second element background\n      setTimeout(function () {\n        $(\"#instruct\").css({ color: \"rgba(0,0,0,0.5)\" }); // change it back after ...\n        $(\"#instruct\").text(\"Choose Another\");\n      }, 500);\n\n      currentScore++;\n\n      if (currentScore === 12) {\n        $(\"#instruct\").text(\"You Win!\"); // click on first element\n\n        $(\"#instruct\").css({ color: \"green\" }); //change second element background\n        setTimeout(function () {\n          $(\"#instruct\").css({ color: \"rgba(0,0,0,0.5)\" }); // change it back after ...\n          $(\"#instruct\").text(\"New Game\");\n        }, 1000);\n        reset();\n        id = null;\n      }\n    }\n    shuffle(cardData);\n    this.setState({ cardData });\n  };\n\n  render() {\n    return (\n      <Container className=\"m-3\">\n        <Row>\n          <Nav currentScore={currentScore} topScore={topScore} />\n        </Row>\n        <Row>\n          {cardData.map((data) => (\n            <Col xs={3} className=\"mb-4\">\n              <Cards\n                isValid={this.isValid}\n                id={data.id}\n                key={data.id}\n                name={data.name}\n                image={data.image}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}